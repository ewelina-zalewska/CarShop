/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as OptionWrapperImport } from "./routes/_optionWrapper";
import { Route as FormWrapperImport } from "./routes/_formWrapper";
import { Route as SplatImport } from "./routes/$";
import { Route as IndexImport } from "./routes/index";
import { Route as OptionWrapperOptionsImport } from "./routes/_optionWrapper/options";
import { Route as FormWrapperCreateImport } from "./routes/_formWrapper/create";
import { Route as OptionWrapperOptionsIndexImport } from "./routes/_optionWrapper/options/index";
import { Route as FormWrapperCreateIndexImport } from "./routes/_formWrapper/create/index";
import { Route as OptionWrapperOptionsNewImport } from "./routes/_optionWrapper/options/new";
import { Route as OptionWrapperOptionsCategoryImport } from "./routes/_optionWrapper/options/category";
import { Route as OptionWrapperOptionsSplatImport } from "./routes/_optionWrapper/options/$";
import { Route as FormWrapperCreateCreateIdImport } from "./routes/_formWrapper/create/$createId";
import { Route as FormWrapperCreateSplatImport } from "./routes/_formWrapper/create/$";
import { Route as OptionWrapperOptionsCategoryCategoryIdImport } from "./routes/_optionWrapper/options/category/$categoryId";
import { Route as OptionWrapperOptionsCategoryCategoryIdNewPartImport } from "./routes/_optionWrapper/options/category/$categoryId.newPart";
import { Route as OptionWrapperOptionsCategoryCategoryIdDeleteImport } from "./routes/_optionWrapper/options/category/$categoryId.delete";

// Create/Update Routes

const OptionWrapperRoute = OptionWrapperImport.update({
	id: "/_optionWrapper",
	getParentRoute: () => rootRoute,
} as any);

const FormWrapperRoute = FormWrapperImport.update({
	id: "/_formWrapper",
	getParentRoute: () => rootRoute,
} as any);

const SplatRoute = SplatImport.update({
	id: "/$",
	path: "/$",
	getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => rootRoute,
} as any);

const OptionWrapperOptionsRoute = OptionWrapperOptionsImport.update({
	id: "/options",
	path: "/options",
	getParentRoute: () => OptionWrapperRoute,
} as any);

const FormWrapperCreateRoute = FormWrapperCreateImport.update({
	id: "/create",
	path: "/create",
	getParentRoute: () => FormWrapperRoute,
} as any);

const OptionWrapperOptionsIndexRoute = OptionWrapperOptionsIndexImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => OptionWrapperOptionsRoute,
} as any);

const FormWrapperCreateIndexRoute = FormWrapperCreateIndexImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => FormWrapperCreateRoute,
} as any);

const OptionWrapperOptionsNewRoute = OptionWrapperOptionsNewImport.update({
	id: "/new",
	path: "/new",
	getParentRoute: () => OptionWrapperOptionsRoute,
} as any);

const OptionWrapperOptionsCategoryRoute =
	OptionWrapperOptionsCategoryImport.update({
		id: "/category",
		path: "/category",
		getParentRoute: () => OptionWrapperOptionsRoute,
	} as any).lazy(() =>
		import("./routes/_optionWrapper/options/category.lazy").then(
			(d) => d.Route,
		),
	);

const OptionWrapperOptionsSplatRoute = OptionWrapperOptionsSplatImport.update({
	id: "/$",
	path: "/$",
	getParentRoute: () => OptionWrapperOptionsRoute,
} as any);

const FormWrapperCreateCreateIdRoute = FormWrapperCreateCreateIdImport.update({
	id: "/$createId",
	path: "/$createId",
	getParentRoute: () => FormWrapperCreateRoute,
} as any);

const FormWrapperCreateSplatRoute = FormWrapperCreateSplatImport.update({
	id: "/$",
	path: "/$",
	getParentRoute: () => FormWrapperCreateRoute,
} as any);

const OptionWrapperOptionsCategoryCategoryIdRoute =
	OptionWrapperOptionsCategoryCategoryIdImport.update({
		id: "/$categoryId",
		path: "/$categoryId",
		getParentRoute: () => OptionWrapperOptionsCategoryRoute,
	} as any).lazy(() =>
		import("./routes/_optionWrapper/options/category/$categoryId.lazy").then(
			(d) => d.Route,
		),
	);

const OptionWrapperOptionsCategoryCategoryIdNewPartRoute =
	OptionWrapperOptionsCategoryCategoryIdNewPartImport.update({
		id: "/newPart",
		path: "/newPart",
		getParentRoute: () => OptionWrapperOptionsCategoryCategoryIdRoute,
	} as any);

const OptionWrapperOptionsCategoryCategoryIdDeleteRoute =
	OptionWrapperOptionsCategoryCategoryIdDeleteImport.update({
		id: "/delete",
		path: "/delete",
		getParentRoute: () => OptionWrapperOptionsCategoryCategoryIdRoute,
	} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/": {
			id: "/";
			path: "/";
			fullPath: "/";
			preLoaderRoute: typeof IndexImport;
			parentRoute: typeof rootRoute;
		};
		"/$": {
			id: "/$";
			path: "/$";
			fullPath: "/$";
			preLoaderRoute: typeof SplatImport;
			parentRoute: typeof rootRoute;
		};
		"/_formWrapper": {
			id: "/_formWrapper";
			path: "";
			fullPath: "";
			preLoaderRoute: typeof FormWrapperImport;
			parentRoute: typeof rootRoute;
		};
		"/_optionWrapper": {
			id: "/_optionWrapper";
			path: "";
			fullPath: "";
			preLoaderRoute: typeof OptionWrapperImport;
			parentRoute: typeof rootRoute;
		};
		"/_formWrapper/create": {
			id: "/_formWrapper/create";
			path: "/create";
			fullPath: "/create";
			preLoaderRoute: typeof FormWrapperCreateImport;
			parentRoute: typeof FormWrapperImport;
		};
		"/_optionWrapper/options": {
			id: "/_optionWrapper/options";
			path: "/options";
			fullPath: "/options";
			preLoaderRoute: typeof OptionWrapperOptionsImport;
			parentRoute: typeof OptionWrapperImport;
		};
		"/_formWrapper/create/$": {
			id: "/_formWrapper/create/$";
			path: "/$";
			fullPath: "/create/$";
			preLoaderRoute: typeof FormWrapperCreateSplatImport;
			parentRoute: typeof FormWrapperCreateImport;
		};
		"/_formWrapper/create/$createId": {
			id: "/_formWrapper/create/$createId";
			path: "/$createId";
			fullPath: "/create/$createId";
			preLoaderRoute: typeof FormWrapperCreateCreateIdImport;
			parentRoute: typeof FormWrapperCreateImport;
		};
		"/_optionWrapper/options/$": {
			id: "/_optionWrapper/options/$";
			path: "/$";
			fullPath: "/options/$";
			preLoaderRoute: typeof OptionWrapperOptionsSplatImport;
			parentRoute: typeof OptionWrapperOptionsImport;
		};
		"/_optionWrapper/options/category": {
			id: "/_optionWrapper/options/category";
			path: "/category";
			fullPath: "/options/category";
			preLoaderRoute: typeof OptionWrapperOptionsCategoryImport;
			parentRoute: typeof OptionWrapperOptionsImport;
		};
		"/_optionWrapper/options/new": {
			id: "/_optionWrapper/options/new";
			path: "/new";
			fullPath: "/options/new";
			preLoaderRoute: typeof OptionWrapperOptionsNewImport;
			parentRoute: typeof OptionWrapperOptionsImport;
		};
		"/_formWrapper/create/": {
			id: "/_formWrapper/create/";
			path: "/";
			fullPath: "/create/";
			preLoaderRoute: typeof FormWrapperCreateIndexImport;
			parentRoute: typeof FormWrapperCreateImport;
		};
		"/_optionWrapper/options/": {
			id: "/_optionWrapper/options/";
			path: "/";
			fullPath: "/options/";
			preLoaderRoute: typeof OptionWrapperOptionsIndexImport;
			parentRoute: typeof OptionWrapperOptionsImport;
		};
		"/_optionWrapper/options/category/$categoryId": {
			id: "/_optionWrapper/options/category/$categoryId";
			path: "/$categoryId";
			fullPath: "/options/category/$categoryId";
			preLoaderRoute: typeof OptionWrapperOptionsCategoryCategoryIdImport;
			parentRoute: typeof OptionWrapperOptionsCategoryImport;
		};
		"/_optionWrapper/options/category/$categoryId/delete": {
			id: "/_optionWrapper/options/category/$categoryId/delete";
			path: "/delete";
			fullPath: "/options/category/$categoryId/delete";
			preLoaderRoute: typeof OptionWrapperOptionsCategoryCategoryIdDeleteImport;
			parentRoute: typeof OptionWrapperOptionsCategoryCategoryIdImport;
		};
		"/_optionWrapper/options/category/$categoryId/newPart": {
			id: "/_optionWrapper/options/category/$categoryId/newPart";
			path: "/newPart";
			fullPath: "/options/category/$categoryId/newPart";
			preLoaderRoute: typeof OptionWrapperOptionsCategoryCategoryIdNewPartImport;
			parentRoute: typeof OptionWrapperOptionsCategoryCategoryIdImport;
		};
	}
}

// Create and export the route tree

interface FormWrapperCreateRouteChildren {
	FormWrapperCreateSplatRoute: typeof FormWrapperCreateSplatRoute;
	FormWrapperCreateCreateIdRoute: typeof FormWrapperCreateCreateIdRoute;
	FormWrapperCreateIndexRoute: typeof FormWrapperCreateIndexRoute;
}

const FormWrapperCreateRouteChildren: FormWrapperCreateRouteChildren = {
	FormWrapperCreateSplatRoute: FormWrapperCreateSplatRoute,
	FormWrapperCreateCreateIdRoute: FormWrapperCreateCreateIdRoute,
	FormWrapperCreateIndexRoute: FormWrapperCreateIndexRoute,
};

const FormWrapperCreateRouteWithChildren =
	FormWrapperCreateRoute._addFileChildren(FormWrapperCreateRouteChildren);

interface FormWrapperRouteChildren {
	FormWrapperCreateRoute: typeof FormWrapperCreateRouteWithChildren;
}

const FormWrapperRouteChildren: FormWrapperRouteChildren = {
	FormWrapperCreateRoute: FormWrapperCreateRouteWithChildren,
};

const FormWrapperRouteWithChildren = FormWrapperRoute._addFileChildren(
	FormWrapperRouteChildren,
);

interface OptionWrapperOptionsCategoryCategoryIdRouteChildren {
	OptionWrapperOptionsCategoryCategoryIdDeleteRoute: typeof OptionWrapperOptionsCategoryCategoryIdDeleteRoute;
	OptionWrapperOptionsCategoryCategoryIdNewPartRoute: typeof OptionWrapperOptionsCategoryCategoryIdNewPartRoute;
}

const OptionWrapperOptionsCategoryCategoryIdRouteChildren: OptionWrapperOptionsCategoryCategoryIdRouteChildren =
	{
		OptionWrapperOptionsCategoryCategoryIdDeleteRoute:
			OptionWrapperOptionsCategoryCategoryIdDeleteRoute,
		OptionWrapperOptionsCategoryCategoryIdNewPartRoute:
			OptionWrapperOptionsCategoryCategoryIdNewPartRoute,
	};

const OptionWrapperOptionsCategoryCategoryIdRouteWithChildren =
	OptionWrapperOptionsCategoryCategoryIdRoute._addFileChildren(
		OptionWrapperOptionsCategoryCategoryIdRouteChildren,
	);

interface OptionWrapperOptionsCategoryRouteChildren {
	OptionWrapperOptionsCategoryCategoryIdRoute: typeof OptionWrapperOptionsCategoryCategoryIdRouteWithChildren;
}

const OptionWrapperOptionsCategoryRouteChildren: OptionWrapperOptionsCategoryRouteChildren =
	{
		OptionWrapperOptionsCategoryCategoryIdRoute:
			OptionWrapperOptionsCategoryCategoryIdRouteWithChildren,
	};

const OptionWrapperOptionsCategoryRouteWithChildren =
	OptionWrapperOptionsCategoryRoute._addFileChildren(
		OptionWrapperOptionsCategoryRouteChildren,
	);

interface OptionWrapperOptionsRouteChildren {
	OptionWrapperOptionsSplatRoute: typeof OptionWrapperOptionsSplatRoute;
	OptionWrapperOptionsCategoryRoute: typeof OptionWrapperOptionsCategoryRouteWithChildren;
	OptionWrapperOptionsNewRoute: typeof OptionWrapperOptionsNewRoute;
	OptionWrapperOptionsIndexRoute: typeof OptionWrapperOptionsIndexRoute;
}

const OptionWrapperOptionsRouteChildren: OptionWrapperOptionsRouteChildren = {
	OptionWrapperOptionsSplatRoute: OptionWrapperOptionsSplatRoute,
	OptionWrapperOptionsCategoryRoute:
		OptionWrapperOptionsCategoryRouteWithChildren,
	OptionWrapperOptionsNewRoute: OptionWrapperOptionsNewRoute,
	OptionWrapperOptionsIndexRoute: OptionWrapperOptionsIndexRoute,
};

const OptionWrapperOptionsRouteWithChildren =
	OptionWrapperOptionsRoute._addFileChildren(OptionWrapperOptionsRouteChildren);

interface OptionWrapperRouteChildren {
	OptionWrapperOptionsRoute: typeof OptionWrapperOptionsRouteWithChildren;
}

const OptionWrapperRouteChildren: OptionWrapperRouteChildren = {
	OptionWrapperOptionsRoute: OptionWrapperOptionsRouteWithChildren,
};

const OptionWrapperRouteWithChildren = OptionWrapperRoute._addFileChildren(
	OptionWrapperRouteChildren,
);

export interface FileRoutesByFullPath {
	"/": typeof IndexRoute;
	"/$": typeof SplatRoute;
	"": typeof OptionWrapperRouteWithChildren;
	"/create": typeof FormWrapperCreateRouteWithChildren;
	"/options": typeof OptionWrapperOptionsRouteWithChildren;
	"/create/$": typeof FormWrapperCreateSplatRoute;
	"/create/$createId": typeof FormWrapperCreateCreateIdRoute;
	"/options/$": typeof OptionWrapperOptionsSplatRoute;
	"/options/category": typeof OptionWrapperOptionsCategoryRouteWithChildren;
	"/options/new": typeof OptionWrapperOptionsNewRoute;
	"/create/": typeof FormWrapperCreateIndexRoute;
	"/options/": typeof OptionWrapperOptionsIndexRoute;
	"/options/category/$categoryId": typeof OptionWrapperOptionsCategoryCategoryIdRouteWithChildren;
	"/options/category/$categoryId/delete": typeof OptionWrapperOptionsCategoryCategoryIdDeleteRoute;
	"/options/category/$categoryId/newPart": typeof OptionWrapperOptionsCategoryCategoryIdNewPartRoute;
}

export interface FileRoutesByTo {
	"/": typeof IndexRoute;
	"/$": typeof SplatRoute;
	"": typeof OptionWrapperRouteWithChildren;
	"/create/$": typeof FormWrapperCreateSplatRoute;
	"/create/$createId": typeof FormWrapperCreateCreateIdRoute;
	"/options/$": typeof OptionWrapperOptionsSplatRoute;
	"/options/category": typeof OptionWrapperOptionsCategoryRouteWithChildren;
	"/options/new": typeof OptionWrapperOptionsNewRoute;
	"/create": typeof FormWrapperCreateIndexRoute;
	"/options": typeof OptionWrapperOptionsIndexRoute;
	"/options/category/$categoryId": typeof OptionWrapperOptionsCategoryCategoryIdRouteWithChildren;
	"/options/category/$categoryId/delete": typeof OptionWrapperOptionsCategoryCategoryIdDeleteRoute;
	"/options/category/$categoryId/newPart": typeof OptionWrapperOptionsCategoryCategoryIdNewPartRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRoute;
	"/": typeof IndexRoute;
	"/$": typeof SplatRoute;
	"/_formWrapper": typeof FormWrapperRouteWithChildren;
	"/_optionWrapper": typeof OptionWrapperRouteWithChildren;
	"/_formWrapper/create": typeof FormWrapperCreateRouteWithChildren;
	"/_optionWrapper/options": typeof OptionWrapperOptionsRouteWithChildren;
	"/_formWrapper/create/$": typeof FormWrapperCreateSplatRoute;
	"/_formWrapper/create/$createId": typeof FormWrapperCreateCreateIdRoute;
	"/_optionWrapper/options/$": typeof OptionWrapperOptionsSplatRoute;
	"/_optionWrapper/options/category": typeof OptionWrapperOptionsCategoryRouteWithChildren;
	"/_optionWrapper/options/new": typeof OptionWrapperOptionsNewRoute;
	"/_formWrapper/create/": typeof FormWrapperCreateIndexRoute;
	"/_optionWrapper/options/": typeof OptionWrapperOptionsIndexRoute;
	"/_optionWrapper/options/category/$categoryId": typeof OptionWrapperOptionsCategoryCategoryIdRouteWithChildren;
	"/_optionWrapper/options/category/$categoryId/delete": typeof OptionWrapperOptionsCategoryCategoryIdDeleteRoute;
	"/_optionWrapper/options/category/$categoryId/newPart": typeof OptionWrapperOptionsCategoryCategoryIdNewPartRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths:
		| "/"
		| "/$"
		| ""
		| "/create"
		| "/options"
		| "/create/$"
		| "/create/$createId"
		| "/options/$"
		| "/options/category"
		| "/options/new"
		| "/create/"
		| "/options/"
		| "/options/category/$categoryId"
		| "/options/category/$categoryId/delete"
		| "/options/category/$categoryId/newPart";
	fileRoutesByTo: FileRoutesByTo;
	to:
		| "/"
		| "/$"
		| ""
		| "/create/$"
		| "/create/$createId"
		| "/options/$"
		| "/options/category"
		| "/options/new"
		| "/create"
		| "/options"
		| "/options/category/$categoryId"
		| "/options/category/$categoryId/delete"
		| "/options/category/$categoryId/newPart";
	id:
		| "__root__"
		| "/"
		| "/$"
		| "/_formWrapper"
		| "/_optionWrapper"
		| "/_formWrapper/create"
		| "/_optionWrapper/options"
		| "/_formWrapper/create/$"
		| "/_formWrapper/create/$createId"
		| "/_optionWrapper/options/$"
		| "/_optionWrapper/options/category"
		| "/_optionWrapper/options/new"
		| "/_formWrapper/create/"
		| "/_optionWrapper/options/"
		| "/_optionWrapper/options/category/$categoryId"
		| "/_optionWrapper/options/category/$categoryId/delete"
		| "/_optionWrapper/options/category/$categoryId/newPart";
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute;
	SplatRoute: typeof SplatRoute;
	FormWrapperRoute: typeof FormWrapperRouteWithChildren;
	OptionWrapperRoute: typeof OptionWrapperRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	SplatRoute: SplatRoute,
	FormWrapperRoute: FormWrapperRouteWithChildren,
	OptionWrapperRoute: OptionWrapperRouteWithChildren,
};

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$",
        "/_formWrapper",
        "/_optionWrapper"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$": {
      "filePath": "$.tsx"
    },
    "/_formWrapper": {
      "filePath": "_formWrapper.tsx",
      "children": [
        "/_formWrapper/create"
      ]
    },
    "/_optionWrapper": {
      "filePath": "_optionWrapper.tsx",
      "children": [
        "/_optionWrapper/options"
      ]
    },
    "/_formWrapper/create": {
      "filePath": "_formWrapper/create.tsx",
      "parent": "/_formWrapper",
      "children": [
        "/_formWrapper/create/$",
        "/_formWrapper/create/$createId",
        "/_formWrapper/create/"
      ]
    },
    "/_optionWrapper/options": {
      "filePath": "_optionWrapper/options.tsx",
      "parent": "/_optionWrapper",
      "children": [
        "/_optionWrapper/options/$",
        "/_optionWrapper/options/category",
        "/_optionWrapper/options/new",
        "/_optionWrapper/options/"
      ]
    },
    "/_formWrapper/create/$": {
      "filePath": "_formWrapper/create/$.tsx",
      "parent": "/_formWrapper/create"
    },
    "/_formWrapper/create/$createId": {
      "filePath": "_formWrapper/create/$createId.tsx",
      "parent": "/_formWrapper/create"
    },
    "/_optionWrapper/options/$": {
      "filePath": "_optionWrapper/options/$.tsx",
      "parent": "/_optionWrapper/options"
    },
    "/_optionWrapper/options/category": {
      "filePath": "_optionWrapper/options/category.tsx",
      "parent": "/_optionWrapper/options",
      "children": [
        "/_optionWrapper/options/category/$categoryId"
      ]
    },
    "/_optionWrapper/options/new": {
      "filePath": "_optionWrapper/options/new.tsx",
      "parent": "/_optionWrapper/options"
    },
    "/_formWrapper/create/": {
      "filePath": "_formWrapper/create/index.tsx",
      "parent": "/_formWrapper/create"
    },
    "/_optionWrapper/options/": {
      "filePath": "_optionWrapper/options/index.tsx",
      "parent": "/_optionWrapper/options"
    },
    "/_optionWrapper/options/category/$categoryId": {
      "filePath": "_optionWrapper/options/category/$categoryId.tsx",
      "parent": "/_optionWrapper/options/category",
      "children": [
        "/_optionWrapper/options/category/$categoryId/delete",
        "/_optionWrapper/options/category/$categoryId/newPart"
      ]
    },
    "/_optionWrapper/options/category/$categoryId/delete": {
      "filePath": "_optionWrapper/options/category/$categoryId.delete.tsx",
      "parent": "/_optionWrapper/options/category/$categoryId"
    },
    "/_optionWrapper/options/category/$categoryId/newPart": {
      "filePath": "_optionWrapper/options/category/$categoryId.newPart.tsx",
      "parent": "/_optionWrapper/options/category/$categoryId"
    }
  }
}
ROUTE_MANIFEST_END */
