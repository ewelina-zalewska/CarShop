/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as OptionWrapperImport } from "./routes/_optionWrapper";
import { Route as FormWrapperImport } from "./routes/_formWrapper";
import { Route as SplatImport } from "./routes/$";
import { Route as IndexImport } from "./routes/index";
import { Route as OptionWrapperOptionsImport } from "./routes/_optionWrapper/options";
import { Route as FormWrapperCreatorImport } from "./routes/_formWrapper/creator";
import { Route as OptionWrapperOptionsIndexImport } from "./routes/_optionWrapper/options/index";
import { Route as FormWrapperCreatorIndexImport } from "./routes/_formWrapper/creator/index";
import { Route as OptionWrapperOptionsNewImport } from "./routes/_optionWrapper/options/new";
import { Route as OptionWrapperOptionsCategoryImport } from "./routes/_optionWrapper/options/category";
import { Route as OptionWrapperOptionsSplatImport } from "./routes/_optionWrapper/options/$";
import { Route as FormWrapperCreatorSummaryImport } from "./routes/_formWrapper/creator/summary";
import { Route as FormWrapperCreatorSuccessImport } from "./routes/_formWrapper/creator/success";
import { Route as FormWrapperCreatorShippingImport } from "./routes/_formWrapper/creator/shipping";
import { Route as FormWrapperCreatorCategoryIdImport } from "./routes/_formWrapper/creator/$categoryId";
import { Route as FormWrapperCreatorSplatImport } from "./routes/_formWrapper/creator/$";
import { Route as OptionWrapperOptionsCategoryCategoryIdImport } from "./routes/_optionWrapper/options/category/$categoryId";
import { Route as OptionWrapperOptionsCategoryCategoryIdNewPartImport } from "./routes/_optionWrapper/options/category/$categoryId.newPart";
import { Route as OptionWrapperOptionsCategoryCategoryIdDeleteImport } from "./routes/_optionWrapper/options/category/$categoryId.delete";

// Create/Update Routes

const OptionWrapperRoute = OptionWrapperImport.update({
	id: "/_optionWrapper",
	getParentRoute: () => rootRoute,
} as any);

const FormWrapperRoute = FormWrapperImport.update({
	id: "/_formWrapper",
	getParentRoute: () => rootRoute,
} as any);

const SplatRoute = SplatImport.update({
	id: "/$",
	path: "/$",
	getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => rootRoute,
} as any);

const OptionWrapperOptionsRoute = OptionWrapperOptionsImport.update({
	id: "/options",
	path: "/options",
	getParentRoute: () => OptionWrapperRoute,
} as any);

const FormWrapperCreatorRoute = FormWrapperCreatorImport.update({
	id: "/creator",
	path: "/creator",
	getParentRoute: () => FormWrapperRoute,
} as any);

const OptionWrapperOptionsIndexRoute = OptionWrapperOptionsIndexImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => OptionWrapperOptionsRoute,
} as any);

const FormWrapperCreatorIndexRoute = FormWrapperCreatorIndexImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => FormWrapperCreatorRoute,
} as any);

const OptionWrapperOptionsNewRoute = OptionWrapperOptionsNewImport.update({
	id: "/new",
	path: "/new",
	getParentRoute: () => OptionWrapperOptionsRoute,
} as any);

const OptionWrapperOptionsCategoryRoute =
	OptionWrapperOptionsCategoryImport.update({
		id: "/category",
		path: "/category",
		getParentRoute: () => OptionWrapperOptionsRoute,
	} as any).lazy(() =>
		import("./routes/_optionWrapper/options/category.lazy").then(
			(d) => d.Route,
		),
	);

const OptionWrapperOptionsSplatRoute = OptionWrapperOptionsSplatImport.update({
	id: "/$",
	path: "/$",
	getParentRoute: () => OptionWrapperOptionsRoute,
} as any);

const FormWrapperCreatorSummaryRoute = FormWrapperCreatorSummaryImport.update({
	id: "/summary",
	path: "/summary",
	getParentRoute: () => FormWrapperCreatorRoute,
} as any);

const FormWrapperCreatorSuccessRoute = FormWrapperCreatorSuccessImport.update({
	id: "/success",
	path: "/success",
	getParentRoute: () => FormWrapperCreatorRoute,
} as any);

const FormWrapperCreatorShippingRoute = FormWrapperCreatorShippingImport.update(
	{
		id: "/shipping",
		path: "/shipping",
		getParentRoute: () => FormWrapperCreatorRoute,
	} as any,
);

const FormWrapperCreatorCategoryIdRoute =
	FormWrapperCreatorCategoryIdImport.update({
		id: "/$categoryId",
		path: "/$categoryId",
		getParentRoute: () => FormWrapperCreatorRoute,
	} as any).lazy(() =>
		import("./routes/_formWrapper/creator/$categoryId.lazy").then(
			(d) => d.Route,
		),
	);

const FormWrapperCreatorSplatRoute = FormWrapperCreatorSplatImport.update({
	id: "/$",
	path: "/$",
	getParentRoute: () => FormWrapperCreatorRoute,
} as any);

const OptionWrapperOptionsCategoryCategoryIdRoute =
	OptionWrapperOptionsCategoryCategoryIdImport.update({
		id: "/$categoryId",
		path: "/$categoryId",
		getParentRoute: () => OptionWrapperOptionsCategoryRoute,
	} as any).lazy(() =>
		import("./routes/_optionWrapper/options/category/$categoryId.lazy").then(
			(d) => d.Route,
		),
	);

const OptionWrapperOptionsCategoryCategoryIdNewPartRoute =
	OptionWrapperOptionsCategoryCategoryIdNewPartImport.update({
		id: "/newPart",
		path: "/newPart",
		getParentRoute: () => OptionWrapperOptionsCategoryCategoryIdRoute,
	} as any);

const OptionWrapperOptionsCategoryCategoryIdDeleteRoute =
	OptionWrapperOptionsCategoryCategoryIdDeleteImport.update({
		id: "/delete",
		path: "/delete",
		getParentRoute: () => OptionWrapperOptionsCategoryCategoryIdRoute,
	} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/": {
			id: "/";
			path: "/";
			fullPath: "/";
			preLoaderRoute: typeof IndexImport;
			parentRoute: typeof rootRoute;
		};
		"/$": {
			id: "/$";
			path: "/$";
			fullPath: "/$";
			preLoaderRoute: typeof SplatImport;
			parentRoute: typeof rootRoute;
		};
		"/_formWrapper": {
			id: "/_formWrapper";
			path: "";
			fullPath: "";
			preLoaderRoute: typeof FormWrapperImport;
			parentRoute: typeof rootRoute;
		};
		"/_optionWrapper": {
			id: "/_optionWrapper";
			path: "";
			fullPath: "";
			preLoaderRoute: typeof OptionWrapperImport;
			parentRoute: typeof rootRoute;
		};
		"/_formWrapper/creator": {
			id: "/_formWrapper/creator";
			path: "/creator";
			fullPath: "/creator";
			preLoaderRoute: typeof FormWrapperCreatorImport;
			parentRoute: typeof FormWrapperImport;
		};
		"/_optionWrapper/options": {
			id: "/_optionWrapper/options";
			path: "/options";
			fullPath: "/options";
			preLoaderRoute: typeof OptionWrapperOptionsImport;
			parentRoute: typeof OptionWrapperImport;
		};
		"/_formWrapper/creator/$": {
			id: "/_formWrapper/creator/$";
			path: "/$";
			fullPath: "/creator/$";
			preLoaderRoute: typeof FormWrapperCreatorSplatImport;
			parentRoute: typeof FormWrapperCreatorImport;
		};
		"/_formWrapper/creator/$categoryId": {
			id: "/_formWrapper/creator/$categoryId";
			path: "/$categoryId";
			fullPath: "/creator/$categoryId";
			preLoaderRoute: typeof FormWrapperCreatorCategoryIdImport;
			parentRoute: typeof FormWrapperCreatorImport;
		};
		"/_formWrapper/creator/shipping": {
			id: "/_formWrapper/creator/shipping";
			path: "/shipping";
			fullPath: "/creator/shipping";
			preLoaderRoute: typeof FormWrapperCreatorShippingImport;
			parentRoute: typeof FormWrapperCreatorImport;
		};
		"/_formWrapper/creator/success": {
			id: "/_formWrapper/creator/success";
			path: "/success";
			fullPath: "/creator/success";
			preLoaderRoute: typeof FormWrapperCreatorSuccessImport;
			parentRoute: typeof FormWrapperCreatorImport;
		};
		"/_formWrapper/creator/summary": {
			id: "/_formWrapper/creator/summary";
			path: "/summary";
			fullPath: "/creator/summary";
			preLoaderRoute: typeof FormWrapperCreatorSummaryImport;
			parentRoute: typeof FormWrapperCreatorImport;
		};
		"/_optionWrapper/options/$": {
			id: "/_optionWrapper/options/$";
			path: "/$";
			fullPath: "/options/$";
			preLoaderRoute: typeof OptionWrapperOptionsSplatImport;
			parentRoute: typeof OptionWrapperOptionsImport;
		};
		"/_optionWrapper/options/category": {
			id: "/_optionWrapper/options/category";
			path: "/category";
			fullPath: "/options/category";
			preLoaderRoute: typeof OptionWrapperOptionsCategoryImport;
			parentRoute: typeof OptionWrapperOptionsImport;
		};
		"/_optionWrapper/options/new": {
			id: "/_optionWrapper/options/new";
			path: "/new";
			fullPath: "/options/new";
			preLoaderRoute: typeof OptionWrapperOptionsNewImport;
			parentRoute: typeof OptionWrapperOptionsImport;
		};
		"/_formWrapper/creator/": {
			id: "/_formWrapper/creator/";
			path: "/";
			fullPath: "/creator/";
			preLoaderRoute: typeof FormWrapperCreatorIndexImport;
			parentRoute: typeof FormWrapperCreatorImport;
		};
		"/_optionWrapper/options/": {
			id: "/_optionWrapper/options/";
			path: "/";
			fullPath: "/options/";
			preLoaderRoute: typeof OptionWrapperOptionsIndexImport;
			parentRoute: typeof OptionWrapperOptionsImport;
		};
		"/_optionWrapper/options/category/$categoryId": {
			id: "/_optionWrapper/options/category/$categoryId";
			path: "/$categoryId";
			fullPath: "/options/category/$categoryId";
			preLoaderRoute: typeof OptionWrapperOptionsCategoryCategoryIdImport;
			parentRoute: typeof OptionWrapperOptionsCategoryImport;
		};
		"/_optionWrapper/options/category/$categoryId/delete": {
			id: "/_optionWrapper/options/category/$categoryId/delete";
			path: "/delete";
			fullPath: "/options/category/$categoryId/delete";
			preLoaderRoute: typeof OptionWrapperOptionsCategoryCategoryIdDeleteImport;
			parentRoute: typeof OptionWrapperOptionsCategoryCategoryIdImport;
		};
		"/_optionWrapper/options/category/$categoryId/newPart": {
			id: "/_optionWrapper/options/category/$categoryId/newPart";
			path: "/newPart";
			fullPath: "/options/category/$categoryId/newPart";
			preLoaderRoute: typeof OptionWrapperOptionsCategoryCategoryIdNewPartImport;
			parentRoute: typeof OptionWrapperOptionsCategoryCategoryIdImport;
		};
	}
}

// Create and export the route tree

interface FormWrapperCreatorRouteChildren {
	FormWrapperCreatorSplatRoute: typeof FormWrapperCreatorSplatRoute;
	FormWrapperCreatorCategoryIdRoute: typeof FormWrapperCreatorCategoryIdRoute;
	FormWrapperCreatorShippingRoute: typeof FormWrapperCreatorShippingRoute;
	FormWrapperCreatorSuccessRoute: typeof FormWrapperCreatorSuccessRoute;
	FormWrapperCreatorSummaryRoute: typeof FormWrapperCreatorSummaryRoute;
	FormWrapperCreatorIndexRoute: typeof FormWrapperCreatorIndexRoute;
}

const FormWrapperCreatorRouteChildren: FormWrapperCreatorRouteChildren = {
	FormWrapperCreatorSplatRoute: FormWrapperCreatorSplatRoute,
	FormWrapperCreatorCategoryIdRoute: FormWrapperCreatorCategoryIdRoute,
	FormWrapperCreatorShippingRoute: FormWrapperCreatorShippingRoute,
	FormWrapperCreatorSuccessRoute: FormWrapperCreatorSuccessRoute,
	FormWrapperCreatorSummaryRoute: FormWrapperCreatorSummaryRoute,
	FormWrapperCreatorIndexRoute: FormWrapperCreatorIndexRoute,
};

const FormWrapperCreatorRouteWithChildren =
	FormWrapperCreatorRoute._addFileChildren(FormWrapperCreatorRouteChildren);

interface FormWrapperRouteChildren {
	FormWrapperCreatorRoute: typeof FormWrapperCreatorRouteWithChildren;
}

const FormWrapperRouteChildren: FormWrapperRouteChildren = {
	FormWrapperCreatorRoute: FormWrapperCreatorRouteWithChildren,
};

const FormWrapperRouteWithChildren = FormWrapperRoute._addFileChildren(
	FormWrapperRouteChildren,
);

interface OptionWrapperOptionsCategoryCategoryIdRouteChildren {
	OptionWrapperOptionsCategoryCategoryIdDeleteRoute: typeof OptionWrapperOptionsCategoryCategoryIdDeleteRoute;
	OptionWrapperOptionsCategoryCategoryIdNewPartRoute: typeof OptionWrapperOptionsCategoryCategoryIdNewPartRoute;
}

const OptionWrapperOptionsCategoryCategoryIdRouteChildren: OptionWrapperOptionsCategoryCategoryIdRouteChildren =
	{
		OptionWrapperOptionsCategoryCategoryIdDeleteRoute:
			OptionWrapperOptionsCategoryCategoryIdDeleteRoute,
		OptionWrapperOptionsCategoryCategoryIdNewPartRoute:
			OptionWrapperOptionsCategoryCategoryIdNewPartRoute,
	};

const OptionWrapperOptionsCategoryCategoryIdRouteWithChildren =
	OptionWrapperOptionsCategoryCategoryIdRoute._addFileChildren(
		OptionWrapperOptionsCategoryCategoryIdRouteChildren,
	);

interface OptionWrapperOptionsCategoryRouteChildren {
	OptionWrapperOptionsCategoryCategoryIdRoute: typeof OptionWrapperOptionsCategoryCategoryIdRouteWithChildren;
}

const OptionWrapperOptionsCategoryRouteChildren: OptionWrapperOptionsCategoryRouteChildren =
	{
		OptionWrapperOptionsCategoryCategoryIdRoute:
			OptionWrapperOptionsCategoryCategoryIdRouteWithChildren,
	};

const OptionWrapperOptionsCategoryRouteWithChildren =
	OptionWrapperOptionsCategoryRoute._addFileChildren(
		OptionWrapperOptionsCategoryRouteChildren,
	);

interface OptionWrapperOptionsRouteChildren {
	OptionWrapperOptionsSplatRoute: typeof OptionWrapperOptionsSplatRoute;
	OptionWrapperOptionsCategoryRoute: typeof OptionWrapperOptionsCategoryRouteWithChildren;
	OptionWrapperOptionsNewRoute: typeof OptionWrapperOptionsNewRoute;
	OptionWrapperOptionsIndexRoute: typeof OptionWrapperOptionsIndexRoute;
}

const OptionWrapperOptionsRouteChildren: OptionWrapperOptionsRouteChildren = {
	OptionWrapperOptionsSplatRoute: OptionWrapperOptionsSplatRoute,
	OptionWrapperOptionsCategoryRoute:
		OptionWrapperOptionsCategoryRouteWithChildren,
	OptionWrapperOptionsNewRoute: OptionWrapperOptionsNewRoute,
	OptionWrapperOptionsIndexRoute: OptionWrapperOptionsIndexRoute,
};

const OptionWrapperOptionsRouteWithChildren =
	OptionWrapperOptionsRoute._addFileChildren(OptionWrapperOptionsRouteChildren);

interface OptionWrapperRouteChildren {
	OptionWrapperOptionsRoute: typeof OptionWrapperOptionsRouteWithChildren;
}

const OptionWrapperRouteChildren: OptionWrapperRouteChildren = {
	OptionWrapperOptionsRoute: OptionWrapperOptionsRouteWithChildren,
};

const OptionWrapperRouteWithChildren = OptionWrapperRoute._addFileChildren(
	OptionWrapperRouteChildren,
);

export interface FileRoutesByFullPath {
	"/": typeof IndexRoute;
	"/$": typeof SplatRoute;
	"": typeof OptionWrapperRouteWithChildren;
	"/creator": typeof FormWrapperCreatorRouteWithChildren;
	"/options": typeof OptionWrapperOptionsRouteWithChildren;
	"/creator/$": typeof FormWrapperCreatorSplatRoute;
	"/creator/$categoryId": typeof FormWrapperCreatorCategoryIdRoute;
	"/creator/shipping": typeof FormWrapperCreatorShippingRoute;
	"/creator/success": typeof FormWrapperCreatorSuccessRoute;
	"/creator/summary": typeof FormWrapperCreatorSummaryRoute;
	"/options/$": typeof OptionWrapperOptionsSplatRoute;
	"/options/category": typeof OptionWrapperOptionsCategoryRouteWithChildren;
	"/options/new": typeof OptionWrapperOptionsNewRoute;
	"/creator/": typeof FormWrapperCreatorIndexRoute;
	"/options/": typeof OptionWrapperOptionsIndexRoute;
	"/options/category/$categoryId": typeof OptionWrapperOptionsCategoryCategoryIdRouteWithChildren;
	"/options/category/$categoryId/delete": typeof OptionWrapperOptionsCategoryCategoryIdDeleteRoute;
	"/options/category/$categoryId/newPart": typeof OptionWrapperOptionsCategoryCategoryIdNewPartRoute;
}

export interface FileRoutesByTo {
	"/": typeof IndexRoute;
	"/$": typeof SplatRoute;
	"": typeof OptionWrapperRouteWithChildren;
	"/creator/$": typeof FormWrapperCreatorSplatRoute;
	"/creator/$categoryId": typeof FormWrapperCreatorCategoryIdRoute;
	"/creator/shipping": typeof FormWrapperCreatorShippingRoute;
	"/creator/success": typeof FormWrapperCreatorSuccessRoute;
	"/creator/summary": typeof FormWrapperCreatorSummaryRoute;
	"/options/$": typeof OptionWrapperOptionsSplatRoute;
	"/options/category": typeof OptionWrapperOptionsCategoryRouteWithChildren;
	"/options/new": typeof OptionWrapperOptionsNewRoute;
	"/creator": typeof FormWrapperCreatorIndexRoute;
	"/options": typeof OptionWrapperOptionsIndexRoute;
	"/options/category/$categoryId": typeof OptionWrapperOptionsCategoryCategoryIdRouteWithChildren;
	"/options/category/$categoryId/delete": typeof OptionWrapperOptionsCategoryCategoryIdDeleteRoute;
	"/options/category/$categoryId/newPart": typeof OptionWrapperOptionsCategoryCategoryIdNewPartRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRoute;
	"/": typeof IndexRoute;
	"/$": typeof SplatRoute;
	"/_formWrapper": typeof FormWrapperRouteWithChildren;
	"/_optionWrapper": typeof OptionWrapperRouteWithChildren;
	"/_formWrapper/creator": typeof FormWrapperCreatorRouteWithChildren;
	"/_optionWrapper/options": typeof OptionWrapperOptionsRouteWithChildren;
	"/_formWrapper/creator/$": typeof FormWrapperCreatorSplatRoute;
	"/_formWrapper/creator/$categoryId": typeof FormWrapperCreatorCategoryIdRoute;
	"/_formWrapper/creator/shipping": typeof FormWrapperCreatorShippingRoute;
	"/_formWrapper/creator/success": typeof FormWrapperCreatorSuccessRoute;
	"/_formWrapper/creator/summary": typeof FormWrapperCreatorSummaryRoute;
	"/_optionWrapper/options/$": typeof OptionWrapperOptionsSplatRoute;
	"/_optionWrapper/options/category": typeof OptionWrapperOptionsCategoryRouteWithChildren;
	"/_optionWrapper/options/new": typeof OptionWrapperOptionsNewRoute;
	"/_formWrapper/creator/": typeof FormWrapperCreatorIndexRoute;
	"/_optionWrapper/options/": typeof OptionWrapperOptionsIndexRoute;
	"/_optionWrapper/options/category/$categoryId": typeof OptionWrapperOptionsCategoryCategoryIdRouteWithChildren;
	"/_optionWrapper/options/category/$categoryId/delete": typeof OptionWrapperOptionsCategoryCategoryIdDeleteRoute;
	"/_optionWrapper/options/category/$categoryId/newPart": typeof OptionWrapperOptionsCategoryCategoryIdNewPartRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths:
		| "/"
		| "/$"
		| ""
		| "/creator"
		| "/options"
		| "/creator/$"
		| "/creator/$categoryId"
		| "/creator/shipping"
		| "/creator/success"
		| "/creator/summary"
		| "/options/$"
		| "/options/category"
		| "/options/new"
		| "/creator/"
		| "/options/"
		| "/options/category/$categoryId"
		| "/options/category/$categoryId/delete"
		| "/options/category/$categoryId/newPart";
	fileRoutesByTo: FileRoutesByTo;
	to:
		| "/"
		| "/$"
		| ""
		| "/creator/$"
		| "/creator/$categoryId"
		| "/creator/shipping"
		| "/creator/success"
		| "/creator/summary"
		| "/options/$"
		| "/options/category"
		| "/options/new"
		| "/creator"
		| "/options"
		| "/options/category/$categoryId"
		| "/options/category/$categoryId/delete"
		| "/options/category/$categoryId/newPart";
	id:
		| "__root__"
		| "/"
		| "/$"
		| "/_formWrapper"
		| "/_optionWrapper"
		| "/_formWrapper/creator"
		| "/_optionWrapper/options"
		| "/_formWrapper/creator/$"
		| "/_formWrapper/creator/$categoryId"
		| "/_formWrapper/creator/shipping"
		| "/_formWrapper/creator/success"
		| "/_formWrapper/creator/summary"
		| "/_optionWrapper/options/$"
		| "/_optionWrapper/options/category"
		| "/_optionWrapper/options/new"
		| "/_formWrapper/creator/"
		| "/_optionWrapper/options/"
		| "/_optionWrapper/options/category/$categoryId"
		| "/_optionWrapper/options/category/$categoryId/delete"
		| "/_optionWrapper/options/category/$categoryId/newPart";
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute;
	SplatRoute: typeof SplatRoute;
	FormWrapperRoute: typeof FormWrapperRouteWithChildren;
	OptionWrapperRoute: typeof OptionWrapperRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	SplatRoute: SplatRoute,
	FormWrapperRoute: FormWrapperRouteWithChildren,
	OptionWrapperRoute: OptionWrapperRouteWithChildren,
};

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$",
        "/_formWrapper",
        "/_optionWrapper"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$": {
      "filePath": "$.tsx"
    },
    "/_formWrapper": {
      "filePath": "_formWrapper.tsx",
      "children": [
        "/_formWrapper/creator"
      ]
    },
    "/_optionWrapper": {
      "filePath": "_optionWrapper.tsx",
      "children": [
        "/_optionWrapper/options"
      ]
    },
    "/_formWrapper/creator": {
      "filePath": "_formWrapper/creator.tsx",
      "parent": "/_formWrapper",
      "children": [
        "/_formWrapper/creator/$",
        "/_formWrapper/creator/$categoryId",
        "/_formWrapper/creator/shipping",
        "/_formWrapper/creator/success",
        "/_formWrapper/creator/summary",
        "/_formWrapper/creator/"
      ]
    },
    "/_optionWrapper/options": {
      "filePath": "_optionWrapper/options.tsx",
      "parent": "/_optionWrapper",
      "children": [
        "/_optionWrapper/options/$",
        "/_optionWrapper/options/category",
        "/_optionWrapper/options/new",
        "/_optionWrapper/options/"
      ]
    },
    "/_formWrapper/creator/$": {
      "filePath": "_formWrapper/creator/$.tsx",
      "parent": "/_formWrapper/creator"
    },
    "/_formWrapper/creator/$categoryId": {
      "filePath": "_formWrapper/creator/$categoryId.tsx",
      "parent": "/_formWrapper/creator"
    },
    "/_formWrapper/creator/shipping": {
      "filePath": "_formWrapper/creator/shipping.tsx",
      "parent": "/_formWrapper/creator"
    },
    "/_formWrapper/creator/success": {
      "filePath": "_formWrapper/creator/success.tsx",
      "parent": "/_formWrapper/creator"
    },
    "/_formWrapper/creator/summary": {
      "filePath": "_formWrapper/creator/summary.tsx",
      "parent": "/_formWrapper/creator"
    },
    "/_optionWrapper/options/$": {
      "filePath": "_optionWrapper/options/$.tsx",
      "parent": "/_optionWrapper/options"
    },
    "/_optionWrapper/options/category": {
      "filePath": "_optionWrapper/options/category.tsx",
      "parent": "/_optionWrapper/options",
      "children": [
        "/_optionWrapper/options/category/$categoryId"
      ]
    },
    "/_optionWrapper/options/new": {
      "filePath": "_optionWrapper/options/new.tsx",
      "parent": "/_optionWrapper/options"
    },
    "/_formWrapper/creator/": {
      "filePath": "_formWrapper/creator/index.tsx",
      "parent": "/_formWrapper/creator"
    },
    "/_optionWrapper/options/": {
      "filePath": "_optionWrapper/options/index.tsx",
      "parent": "/_optionWrapper/options"
    },
    "/_optionWrapper/options/category/$categoryId": {
      "filePath": "_optionWrapper/options/category/$categoryId.tsx",
      "parent": "/_optionWrapper/options/category",
      "children": [
        "/_optionWrapper/options/category/$categoryId/delete",
        "/_optionWrapper/options/category/$categoryId/newPart"
      ]
    },
    "/_optionWrapper/options/category/$categoryId/delete": {
      "filePath": "_optionWrapper/options/category/$categoryId.delete.tsx",
      "parent": "/_optionWrapper/options/category/$categoryId"
    },
    "/_optionWrapper/options/category/$categoryId/newPart": {
      "filePath": "_optionWrapper/options/category/$categoryId.newPart.tsx",
      "parent": "/_optionWrapper/options/category/$categoryId"
    }
  }
}
ROUTE_MANIFEST_END */
